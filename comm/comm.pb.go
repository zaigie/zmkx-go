// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: comm.proto

package comm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action int32

const (
	Action_NOP               Action = 0
	Action_VERSION           Action = 1
	Action_MOTOR_GET_STATE   Action = 2
	Action_KNOB_GET_CONFIG   Action = 3
	Action_KNOB_SET_CONFIG   Action = 4
	Action_KNOB_UPDATE_PREF  Action = 9
	Action_RGB_CONTROL       Action = 5
	Action_RGB_GET_STATE     Action = 6
	Action_RGB_SET_STATE     Action = 8
	Action_RGB_GET_INDICATOR Action = 10
	Action_RGB_SET_INDICATOR Action = 11
	Action_EINK_SET_IMAGE    Action = 7
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0:  "NOP",
		1:  "VERSION",
		2:  "MOTOR_GET_STATE",
		3:  "KNOB_GET_CONFIG",
		4:  "KNOB_SET_CONFIG",
		9:  "KNOB_UPDATE_PREF",
		5:  "RGB_CONTROL",
		6:  "RGB_GET_STATE",
		8:  "RGB_SET_STATE",
		10: "RGB_GET_INDICATOR",
		11: "RGB_SET_INDICATOR",
		7:  "EINK_SET_IMAGE",
	}
	Action_value = map[string]int32{
		"NOP":               0,
		"VERSION":           1,
		"MOTOR_GET_STATE":   2,
		"KNOB_GET_CONFIG":   3,
		"KNOB_SET_CONFIG":   4,
		"KNOB_UPDATE_PREF":  9,
		"RGB_CONTROL":       5,
		"RGB_GET_STATE":     6,
		"RGB_SET_STATE":     8,
		"RGB_GET_INDICATOR": 10,
		"RGB_SET_INDICATOR": 11,
		"EINK_SET_IMAGE":    7,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_comm_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Action(num)
	return nil
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{0}
}

type MotorState_ControlMode int32

const (
	MotorState_TORQUE   MotorState_ControlMode = 0
	MotorState_VELOCITY MotorState_ControlMode = 1
	MotorState_ANGLE    MotorState_ControlMode = 2
)

// Enum value maps for MotorState_ControlMode.
var (
	MotorState_ControlMode_name = map[int32]string{
		0: "TORQUE",
		1: "VELOCITY",
		2: "ANGLE",
	}
	MotorState_ControlMode_value = map[string]int32{
		"TORQUE":   0,
		"VELOCITY": 1,
		"ANGLE":    2,
	}
)

func (x MotorState_ControlMode) Enum() *MotorState_ControlMode {
	p := new(MotorState_ControlMode)
	*p = x
	return p
}

func (x MotorState_ControlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MotorState_ControlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_proto_enumTypes[1].Descriptor()
}

func (MotorState_ControlMode) Type() protoreflect.EnumType {
	return &file_comm_proto_enumTypes[1]
}

func (x MotorState_ControlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MotorState_ControlMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MotorState_ControlMode(num)
	return nil
}

// Deprecated: Use MotorState_ControlMode.Descriptor instead.
func (MotorState_ControlMode) EnumDescriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{4, 0}
}

type KnobConfig_Mode int32

const (
	KnobConfig_DISABLE KnobConfig_Mode = 0
	KnobConfig_INERTIA KnobConfig_Mode = 1
	KnobConfig_ENCODER KnobConfig_Mode = 2
	KnobConfig_SPRING  KnobConfig_Mode = 3
	KnobConfig_DAMPED  KnobConfig_Mode = 4
	KnobConfig_SPIN    KnobConfig_Mode = 5
	KnobConfig_RATCHET KnobConfig_Mode = 6
)

// Enum value maps for KnobConfig_Mode.
var (
	KnobConfig_Mode_name = map[int32]string{
		0: "DISABLE",
		1: "INERTIA",
		2: "ENCODER",
		3: "SPRING",
		4: "DAMPED",
		5: "SPIN",
		6: "RATCHET",
	}
	KnobConfig_Mode_value = map[string]int32{
		"DISABLE": 0,
		"INERTIA": 1,
		"ENCODER": 2,
		"SPRING":  3,
		"DAMPED":  4,
		"SPIN":    5,
		"RATCHET": 6,
	}
)

func (x KnobConfig_Mode) Enum() *KnobConfig_Mode {
	p := new(KnobConfig_Mode)
	*p = x
	return p
}

func (x KnobConfig_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KnobConfig_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_proto_enumTypes[2].Descriptor()
}

func (KnobConfig_Mode) Type() protoreflect.EnumType {
	return &file_comm_proto_enumTypes[2]
}

func (x KnobConfig_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KnobConfig_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KnobConfig_Mode(num)
	return nil
}

// Deprecated: Use KnobConfig_Mode.Descriptor instead.
func (KnobConfig_Mode) EnumDescriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{5, 0}
}

type RgbControl_Command int32

const (
	RgbControl_RGB_ON  RgbControl_Command = 1
	RgbControl_RGB_OFF RgbControl_Command = 2
	RgbControl_RGB_HUI RgbControl_Command = 3
	RgbControl_RGB_HUD RgbControl_Command = 4
	RgbControl_RGB_SAI RgbControl_Command = 5
	RgbControl_RGB_SAD RgbControl_Command = 6
	RgbControl_RGB_BRI RgbControl_Command = 7
	RgbControl_RGB_BRD RgbControl_Command = 8
	RgbControl_RGB_SPI RgbControl_Command = 9
	RgbControl_RGB_SPD RgbControl_Command = 10
	RgbControl_RGB_EFF RgbControl_Command = 11
	RgbControl_RGB_EFR RgbControl_Command = 12
)

// Enum value maps for RgbControl_Command.
var (
	RgbControl_Command_name = map[int32]string{
		1:  "RGB_ON",
		2:  "RGB_OFF",
		3:  "RGB_HUI",
		4:  "RGB_HUD",
		5:  "RGB_SAI",
		6:  "RGB_SAD",
		7:  "RGB_BRI",
		8:  "RGB_BRD",
		9:  "RGB_SPI",
		10: "RGB_SPD",
		11: "RGB_EFF",
		12: "RGB_EFR",
	}
	RgbControl_Command_value = map[string]int32{
		"RGB_ON":  1,
		"RGB_OFF": 2,
		"RGB_HUI": 3,
		"RGB_HUD": 4,
		"RGB_SAI": 5,
		"RGB_SAD": 6,
		"RGB_BRI": 7,
		"RGB_BRD": 8,
		"RGB_SPI": 9,
		"RGB_SPD": 10,
		"RGB_EFF": 11,
		"RGB_EFR": 12,
	}
)

func (x RgbControl_Command) Enum() *RgbControl_Command {
	p := new(RgbControl_Command)
	*p = x
	return p
}

func (x RgbControl_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RgbControl_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_proto_enumTypes[3].Descriptor()
}

func (RgbControl_Command) Type() protoreflect.EnumType {
	return &file_comm_proto_enumTypes[3]
}

func (x RgbControl_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RgbControl_Command) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RgbControl_Command(num)
	return nil
}

// Deprecated: Use RgbControl_Command.Descriptor instead.
func (RgbControl_Command) EnumDescriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{6, 0}
}

type RgbState_Effect int32

const (
	RgbState_SOLID    RgbState_Effect = 0
	RgbState_BREATHE  RgbState_Effect = 1
	RgbState_SPECTRUM RgbState_Effect = 2
	RgbState_SWIRL    RgbState_Effect = 3
)

// Enum value maps for RgbState_Effect.
var (
	RgbState_Effect_name = map[int32]string{
		0: "SOLID",
		1: "BREATHE",
		2: "SPECTRUM",
		3: "SWIRL",
	}
	RgbState_Effect_value = map[string]int32{
		"SOLID":    0,
		"BREATHE":  1,
		"SPECTRUM": 2,
		"SWIRL":    3,
	}
)

func (x RgbState_Effect) Enum() *RgbState_Effect {
	p := new(RgbState_Effect)
	*p = x
	return p
}

func (x RgbState_Effect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RgbState_Effect) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_proto_enumTypes[4].Descriptor()
}

func (RgbState_Effect) Type() protoreflect.EnumType {
	return &file_comm_proto_enumTypes[4]
}

func (x RgbState_Effect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RgbState_Effect) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RgbState_Effect(num)
	return nil
}

// Deprecated: Use RgbState_Effect.Descriptor instead.
func (RgbState_Effect) EnumDescriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{7, 0}
}

type MessageH2D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *Action `protobuf:"varint,1,req,name=action,enum=UsbComm.Action" json:"action,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*MessageH2D_Nop
	//	*MessageH2D_KnobConfig
	//	*MessageH2D_KnobPref
	//	*MessageH2D_RgbControl
	//	*MessageH2D_RgbState
	//	*MessageH2D_RgbIndicator
	//	*MessageH2D_EinkImage
	Payload isMessageH2D_Payload `protobuf_oneof:"payload"`
}

func (x *MessageH2D) Reset() {
	*x = MessageH2D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageH2D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageH2D) ProtoMessage() {}

func (x *MessageH2D) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageH2D.ProtoReflect.Descriptor instead.
func (*MessageH2D) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{0}
}

func (x *MessageH2D) GetAction() Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Action_NOP
}

func (m *MessageH2D) GetPayload() isMessageH2D_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *MessageH2D) GetNop() *Nop {
	if x, ok := x.GetPayload().(*MessageH2D_Nop); ok {
		return x.Nop
	}
	return nil
}

func (x *MessageH2D) GetKnobConfig() *KnobConfig {
	if x, ok := x.GetPayload().(*MessageH2D_KnobConfig); ok {
		return x.KnobConfig
	}
	return nil
}

func (x *MessageH2D) GetKnobPref() *KnobConfig_Pref {
	if x, ok := x.GetPayload().(*MessageH2D_KnobPref); ok {
		return x.KnobPref
	}
	return nil
}

func (x *MessageH2D) GetRgbControl() *RgbControl {
	if x, ok := x.GetPayload().(*MessageH2D_RgbControl); ok {
		return x.RgbControl
	}
	return nil
}

func (x *MessageH2D) GetRgbState() *RgbState {
	if x, ok := x.GetPayload().(*MessageH2D_RgbState); ok {
		return x.RgbState
	}
	return nil
}

func (x *MessageH2D) GetRgbIndicator() *RgbIndicator {
	if x, ok := x.GetPayload().(*MessageH2D_RgbIndicator); ok {
		return x.RgbIndicator
	}
	return nil
}

func (x *MessageH2D) GetEinkImage() *EinkImage {
	if x, ok := x.GetPayload().(*MessageH2D_EinkImage); ok {
		return x.EinkImage
	}
	return nil
}

type isMessageH2D_Payload interface {
	isMessageH2D_Payload()
}

type MessageH2D_Nop struct {
	Nop *Nop `protobuf:"bytes,2,opt,name=nop,oneof"`
}

type MessageH2D_KnobConfig struct {
	KnobConfig *KnobConfig `protobuf:"bytes,3,opt,name=knob_config,json=knobConfig,oneof"`
}

type MessageH2D_KnobPref struct {
	KnobPref *KnobConfig_Pref `protobuf:"bytes,6,opt,name=knob_pref,json=knobPref,oneof"`
}

type MessageH2D_RgbControl struct {
	RgbControl *RgbControl `protobuf:"bytes,4,opt,name=rgb_control,json=rgbControl,oneof"`
}

type MessageH2D_RgbState struct {
	RgbState *RgbState `protobuf:"bytes,7,opt,name=rgb_state,json=rgbState,oneof"`
}

type MessageH2D_RgbIndicator struct {
	RgbIndicator *RgbIndicator `protobuf:"bytes,8,opt,name=rgb_indicator,json=rgbIndicator,oneof"`
}

type MessageH2D_EinkImage struct {
	EinkImage *EinkImage `protobuf:"bytes,5,opt,name=eink_image,json=einkImage,oneof"`
}

func (*MessageH2D_Nop) isMessageH2D_Payload() {}

func (*MessageH2D_KnobConfig) isMessageH2D_Payload() {}

func (*MessageH2D_KnobPref) isMessageH2D_Payload() {}

func (*MessageH2D_RgbControl) isMessageH2D_Payload() {}

func (*MessageH2D_RgbState) isMessageH2D_Payload() {}

func (*MessageH2D_RgbIndicator) isMessageH2D_Payload() {}

func (*MessageH2D_EinkImage) isMessageH2D_Payload() {}

type MessageD2H struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *Action `protobuf:"varint,1,req,name=action,enum=UsbComm.Action" json:"action,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*MessageD2H_Nop
	//	*MessageD2H_Version
	//	*MessageD2H_MotorState
	//	*MessageD2H_KnobConfig
	//	*MessageD2H_KnobPref
	//	*MessageD2H_RgbState
	//	*MessageD2H_RgbIndicator
	//	*MessageD2H_EinkImage
	Payload isMessageD2H_Payload `protobuf_oneof:"payload"`
}

func (x *MessageD2H) Reset() {
	*x = MessageD2H{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageD2H) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageD2H) ProtoMessage() {}

func (x *MessageD2H) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageD2H.ProtoReflect.Descriptor instead.
func (*MessageD2H) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{1}
}

func (x *MessageD2H) GetAction() Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Action_NOP
}

func (m *MessageD2H) GetPayload() isMessageD2H_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *MessageD2H) GetNop() *Nop {
	if x, ok := x.GetPayload().(*MessageD2H_Nop); ok {
		return x.Nop
	}
	return nil
}

func (x *MessageD2H) GetVersion() *Version {
	if x, ok := x.GetPayload().(*MessageD2H_Version); ok {
		return x.Version
	}
	return nil
}

func (x *MessageD2H) GetMotorState() *MotorState {
	if x, ok := x.GetPayload().(*MessageD2H_MotorState); ok {
		return x.MotorState
	}
	return nil
}

func (x *MessageD2H) GetKnobConfig() *KnobConfig {
	if x, ok := x.GetPayload().(*MessageD2H_KnobConfig); ok {
		return x.KnobConfig
	}
	return nil
}

func (x *MessageD2H) GetKnobPref() *KnobConfig_Pref {
	if x, ok := x.GetPayload().(*MessageD2H_KnobPref); ok {
		return x.KnobPref
	}
	return nil
}

func (x *MessageD2H) GetRgbState() *RgbState {
	if x, ok := x.GetPayload().(*MessageD2H_RgbState); ok {
		return x.RgbState
	}
	return nil
}

func (x *MessageD2H) GetRgbIndicator() *RgbIndicator {
	if x, ok := x.GetPayload().(*MessageD2H_RgbIndicator); ok {
		return x.RgbIndicator
	}
	return nil
}

func (x *MessageD2H) GetEinkImage() *EinkImage {
	if x, ok := x.GetPayload().(*MessageD2H_EinkImage); ok {
		return x.EinkImage
	}
	return nil
}

type isMessageD2H_Payload interface {
	isMessageD2H_Payload()
}

type MessageD2H_Nop struct {
	Nop *Nop `protobuf:"bytes,2,opt,name=nop,oneof"`
}

type MessageD2H_Version struct {
	Version *Version `protobuf:"bytes,3,opt,name=version,oneof"`
}

type MessageD2H_MotorState struct {
	MotorState *MotorState `protobuf:"bytes,4,opt,name=motor_state,json=motorState,oneof"`
}

type MessageD2H_KnobConfig struct {
	KnobConfig *KnobConfig `protobuf:"bytes,5,opt,name=knob_config,json=knobConfig,oneof"`
}

type MessageD2H_KnobPref struct {
	KnobPref *KnobConfig_Pref `protobuf:"bytes,8,opt,name=knob_pref,json=knobPref,oneof"`
}

type MessageD2H_RgbState struct {
	RgbState *RgbState `protobuf:"bytes,6,opt,name=rgb_state,json=rgbState,oneof"`
}

type MessageD2H_RgbIndicator struct {
	RgbIndicator *RgbIndicator `protobuf:"bytes,9,opt,name=rgb_indicator,json=rgbIndicator,oneof"`
}

type MessageD2H_EinkImage struct {
	EinkImage *EinkImage `protobuf:"bytes,7,opt,name=eink_image,json=einkImage,oneof"`
}

func (*MessageD2H_Nop) isMessageD2H_Payload() {}

func (*MessageD2H_Version) isMessageD2H_Payload() {}

func (*MessageD2H_MotorState) isMessageD2H_Payload() {}

func (*MessageD2H_KnobConfig) isMessageD2H_Payload() {}

func (*MessageD2H_KnobPref) isMessageD2H_Payload() {}

func (*MessageD2H_RgbState) isMessageD2H_Payload() {}

func (*MessageD2H_RgbIndicator) isMessageD2H_Payload() {}

func (*MessageD2H_EinkImage) isMessageD2H_Payload() {}

type Nop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Nop) Reset() {
	*x = Nop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nop) ProtoMessage() {}

func (x *Nop) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nop.ProtoReflect.Descriptor instead.
func (*Nop) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{2}
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZephyrVersion *string           `protobuf:"bytes,1,req,name=zephyr_version,json=zephyrVersion" json:"zephyr_version,omitempty"`
	ZmkVersion    *string           `protobuf:"bytes,2,req,name=zmk_version,json=zmkVersion" json:"zmk_version,omitempty"`
	AppVersion    *string           `protobuf:"bytes,3,req,name=app_version,json=appVersion" json:"app_version,omitempty"`
	Features      *Version_Features `protobuf:"bytes,4,opt,name=features" json:"features,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{3}
}

func (x *Version) GetZephyrVersion() string {
	if x != nil && x.ZephyrVersion != nil {
		return *x.ZephyrVersion
	}
	return ""
}

func (x *Version) GetZmkVersion() string {
	if x != nil && x.ZmkVersion != nil {
		return *x.ZmkVersion
	}
	return ""
}

func (x *Version) GetAppVersion() string {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return ""
}

func (x *Version) GetFeatures() *Version_Features {
	if x != nil {
		return x.Features
	}
	return nil
}

type MotorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp       *uint32                 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
	ControlMode     *MotorState_ControlMode `protobuf:"varint,2,req,name=control_mode,json=controlMode,enum=UsbComm.MotorState_ControlMode" json:"control_mode,omitempty"`
	CurrentAngle    *float32                `protobuf:"fixed32,3,req,name=current_angle,json=currentAngle" json:"current_angle,omitempty"`
	CurrentVelocity *float32                `protobuf:"fixed32,4,req,name=current_velocity,json=currentVelocity" json:"current_velocity,omitempty"`
	TargetAngle     *float32                `protobuf:"fixed32,5,req,name=target_angle,json=targetAngle" json:"target_angle,omitempty"`
	TargetVelocity  *float32                `protobuf:"fixed32,6,req,name=target_velocity,json=targetVelocity" json:"target_velocity,omitempty"`
	TargetVoltage   *float32                `protobuf:"fixed32,7,req,name=target_voltage,json=targetVoltage" json:"target_voltage,omitempty"`
}

func (x *MotorState) Reset() {
	*x = MotorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MotorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MotorState) ProtoMessage() {}

func (x *MotorState) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MotorState.ProtoReflect.Descriptor instead.
func (*MotorState) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{4}
}

func (x *MotorState) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *MotorState) GetControlMode() MotorState_ControlMode {
	if x != nil && x.ControlMode != nil {
		return *x.ControlMode
	}
	return MotorState_TORQUE
}

func (x *MotorState) GetCurrentAngle() float32 {
	if x != nil && x.CurrentAngle != nil {
		return *x.CurrentAngle
	}
	return 0
}

func (x *MotorState) GetCurrentVelocity() float32 {
	if x != nil && x.CurrentVelocity != nil {
		return *x.CurrentVelocity
	}
	return 0
}

func (x *MotorState) GetTargetAngle() float32 {
	if x != nil && x.TargetAngle != nil {
		return *x.TargetAngle
	}
	return 0
}

func (x *MotorState) GetTargetVelocity() float32 {
	if x != nil && x.TargetVelocity != nil {
		return *x.TargetVelocity
	}
	return 0
}

func (x *MotorState) GetTargetVoltage() float32 {
	if x != nil && x.TargetVoltage != nil {
		return *x.TargetVoltage
	}
	return 0
}

type KnobConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Demo  *bool              `protobuf:"varint,1,req,name=demo" json:"demo,omitempty"`
	Mode  *KnobConfig_Mode   `protobuf:"varint,2,req,name=mode,enum=UsbComm.KnobConfig_Mode" json:"mode,omitempty"`
	Prefs []*KnobConfig_Pref `protobuf:"bytes,5,rep,name=prefs" json:"prefs,omitempty"`
}

func (x *KnobConfig) Reset() {
	*x = KnobConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnobConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnobConfig) ProtoMessage() {}

func (x *KnobConfig) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnobConfig.ProtoReflect.Descriptor instead.
func (*KnobConfig) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{5}
}

func (x *KnobConfig) GetDemo() bool {
	if x != nil && x.Demo != nil {
		return *x.Demo
	}
	return false
}

func (x *KnobConfig) GetMode() KnobConfig_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return KnobConfig_DISABLE
}

func (x *KnobConfig) GetPrefs() []*KnobConfig_Pref {
	if x != nil {
		return x.Prefs
	}
	return nil
}

type RgbControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command *RgbControl_Command `protobuf:"varint,1,req,name=command,enum=UsbComm.RgbControl_Command" json:"command,omitempty"`
}

func (x *RgbControl) Reset() {
	*x = RgbControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RgbControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RgbControl) ProtoMessage() {}

func (x *RgbControl) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RgbControl.ProtoReflect.Descriptor instead.
func (*RgbControl) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{6}
}

func (x *RgbControl) GetCommand() RgbControl_Command {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return RgbControl_RGB_ON
}

type RgbState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On     *bool            `protobuf:"varint,1,req,name=on" json:"on,omitempty"`
	Color  *RgbState_HSB    `protobuf:"bytes,2,opt,name=color" json:"color,omitempty"`
	Effect *RgbState_Effect `protobuf:"varint,3,opt,name=effect,enum=UsbComm.RgbState_Effect" json:"effect,omitempty"`
	Speed  *uint32          `protobuf:"varint,4,opt,name=speed" json:"speed,omitempty"`
}

func (x *RgbState) Reset() {
	*x = RgbState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RgbState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RgbState) ProtoMessage() {}

func (x *RgbState) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RgbState.ProtoReflect.Descriptor instead.
func (*RgbState) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{7}
}

func (x *RgbState) GetOn() bool {
	if x != nil && x.On != nil {
		return *x.On
	}
	return false
}

func (x *RgbState) GetColor() *RgbState_HSB {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *RgbState) GetEffect() RgbState_Effect {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return RgbState_SOLID
}

func (x *RgbState) GetSpeed() uint32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

type RgbIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable             *bool   `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	BrightnessActive   *uint32 `protobuf:"varint,2,opt,name=brightness_active,json=brightnessActive" json:"brightness_active,omitempty"`
	BrightnessInactive *uint32 `protobuf:"varint,3,opt,name=brightness_inactive,json=brightnessInactive" json:"brightness_inactive,omitempty"`
}

func (x *RgbIndicator) Reset() {
	*x = RgbIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RgbIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RgbIndicator) ProtoMessage() {}

func (x *RgbIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RgbIndicator.ProtoReflect.Descriptor instead.
func (*RgbIndicator) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{8}
}

func (x *RgbIndicator) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *RgbIndicator) GetBrightnessActive() uint32 {
	if x != nil && x.BrightnessActive != nil {
		return *x.BrightnessActive
	}
	return 0
}

func (x *RgbIndicator) GetBrightnessInactive() uint32 {
	if x != nil && x.BrightnessInactive != nil {
		return *x.BrightnessInactive
	}
	return 0
}

type EinkImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Deprecated: Marked as deprecated in comm.proto.
	BitsLength *uint32 `protobuf:"varint,2,opt,name=bits_length,json=bitsLength" json:"bits_length,omitempty"`
	Bits       []byte  `protobuf:"bytes,3,opt,name=bits" json:"bits,omitempty"`
}

func (x *EinkImage) Reset() {
	*x = EinkImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EinkImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EinkImage) ProtoMessage() {}

func (x *EinkImage) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EinkImage.ProtoReflect.Descriptor instead.
func (*EinkImage) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{9}
}

func (x *EinkImage) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

// Deprecated: Marked as deprecated in comm.proto.
func (x *EinkImage) GetBitsLength() uint32 {
	if x != nil && x.BitsLength != nil {
		return *x.BitsLength
	}
	return 0
}

func (x *EinkImage) GetBits() []byte {
	if x != nil {
		return x.Bits
	}
	return nil
}

type Version_Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rgb            *bool `protobuf:"varint,1,opt,name=rgb" json:"rgb,omitempty"`
	RgbFullControl *bool `protobuf:"varint,5,opt,name=rgb_full_control,json=rgbFullControl" json:"rgb_full_control,omitempty"`
	RgbIndicator   *bool `protobuf:"varint,6,opt,name=rgb_indicator,json=rgbIndicator" json:"rgb_indicator,omitempty"`
	Eink           *bool `protobuf:"varint,2,opt,name=eink" json:"eink,omitempty"`
	Knob           *bool `protobuf:"varint,3,opt,name=knob" json:"knob,omitempty"`
	KnobPrefs      *bool `protobuf:"varint,4,opt,name=knob_prefs,json=knobPrefs" json:"knob_prefs,omitempty"`
}

func (x *Version_Features) Reset() {
	*x = Version_Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version_Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version_Features) ProtoMessage() {}

func (x *Version_Features) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version_Features.ProtoReflect.Descriptor instead.
func (*Version_Features) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Version_Features) GetRgb() bool {
	if x != nil && x.Rgb != nil {
		return *x.Rgb
	}
	return false
}

func (x *Version_Features) GetRgbFullControl() bool {
	if x != nil && x.RgbFullControl != nil {
		return *x.RgbFullControl
	}
	return false
}

func (x *Version_Features) GetRgbIndicator() bool {
	if x != nil && x.RgbIndicator != nil {
		return *x.RgbIndicator
	}
	return false
}

func (x *Version_Features) GetEink() bool {
	if x != nil && x.Eink != nil {
		return *x.Eink
	}
	return false
}

func (x *Version_Features) GetKnob() bool {
	if x != nil && x.Knob != nil {
		return *x.Knob
	}
	return false
}

func (x *Version_Features) GetKnobPrefs() bool {
	if x != nil && x.KnobPrefs != nil {
		return *x.KnobPrefs
	}
	return false
}

type KnobConfig_Pref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayerId     *uint32          `protobuf:"varint,1,req,name=layer_id,json=layerId" json:"layer_id,omitempty"`
	LayerName   *string          `protobuf:"bytes,2,opt,name=layer_name,json=layerName" json:"layer_name,omitempty"`
	Active      *bool            `protobuf:"varint,3,req,name=active" json:"active,omitempty"`
	Mode        *KnobConfig_Mode `protobuf:"varint,4,opt,name=mode,enum=UsbComm.KnobConfig_Mode" json:"mode,omitempty"`
	Ppr         *uint32          `protobuf:"varint,5,opt,name=ppr" json:"ppr,omitempty"`
	TorqueLimit *float32         `protobuf:"fixed32,6,opt,name=torque_limit,json=torqueLimit" json:"torque_limit,omitempty"`
}

func (x *KnobConfig_Pref) Reset() {
	*x = KnobConfig_Pref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnobConfig_Pref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnobConfig_Pref) ProtoMessage() {}

func (x *KnobConfig_Pref) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnobConfig_Pref.ProtoReflect.Descriptor instead.
func (*KnobConfig_Pref) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{5, 0}
}

func (x *KnobConfig_Pref) GetLayerId() uint32 {
	if x != nil && x.LayerId != nil {
		return *x.LayerId
	}
	return 0
}

func (x *KnobConfig_Pref) GetLayerName() string {
	if x != nil && x.LayerName != nil {
		return *x.LayerName
	}
	return ""
}

func (x *KnobConfig_Pref) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *KnobConfig_Pref) GetMode() KnobConfig_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return KnobConfig_DISABLE
}

func (x *KnobConfig_Pref) GetPpr() uint32 {
	if x != nil && x.Ppr != nil {
		return *x.Ppr
	}
	return 0
}

func (x *KnobConfig_Pref) GetTorqueLimit() float32 {
	if x != nil && x.TorqueLimit != nil {
		return *x.TorqueLimit
	}
	return 0
}

type RgbState_HSB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H *uint32 `protobuf:"varint,1,req,name=h" json:"h,omitempty"`
	S *uint32 `protobuf:"varint,2,req,name=s" json:"s,omitempty"`
	B *uint32 `protobuf:"varint,3,req,name=b" json:"b,omitempty"`
}

func (x *RgbState_HSB) Reset() {
	*x = RgbState_HSB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RgbState_HSB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RgbState_HSB) ProtoMessage() {}

func (x *RgbState_HSB) ProtoReflect() protoreflect.Message {
	mi := &file_comm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RgbState_HSB.ProtoReflect.Descriptor instead.
func (*RgbState_HSB) Descriptor() ([]byte, []int) {
	return file_comm_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RgbState_HSB) GetH() uint32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *RgbState_HSB) GetS() uint32 {
	if x != nil && x.S != nil {
		return *x.S
	}
	return 0
}

func (x *RgbState_HSB) GetB() uint32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

var File_comm_proto protoreflect.FileDescriptor

var file_comm_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x55, 0x73,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x22, 0xb0, 0x03, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x32, 0x44, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x03, 0x6e, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x55, 0x73, 0x62,
	0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x70, 0x12,
	0x36, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4b,
	0x6e, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x6e, 0x6f,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x09, 0x6b, 0x6e, 0x6f, 0x62, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x55, 0x73, 0x62,
	0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4b, 0x6e, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x6e, 0x6f, 0x62, 0x50, 0x72, 0x65, 0x66,
	0x12, 0x36, 0x0a, 0x0b, 0x72, 0x67, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e,
	0x52, 0x67, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x67,
	0x62, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x67, 0x62, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x55, 0x73,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x67, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x67, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x67,
	0x62, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x67, 0x62, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x67, 0x62, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x69, 0x6e, 0x6b,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x55,
	0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x69, 0x6e, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x65, 0x69, 0x6e, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xde, 0x03, 0x0a, 0x0a, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x32, 0x48, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d,
	0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x03, 0x6e, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6e,
	0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e,
	0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x62,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4b, 0x6e, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x6e, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x37, 0x0a, 0x09, 0x6b, 0x6e, 0x6f, 0x62, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4b, 0x6e,
	0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x48, 0x00, 0x52,
	0x08, 0x6b, 0x6e, 0x6f, 0x62, 0x50, 0x72, 0x65, 0x66, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x67, 0x62,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x55,
	0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x67, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x67, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x72,
	0x67, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x67, 0x62,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x67, 0x62,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x69, 0x6e,
	0x6b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x69, 0x6e, 0x6b, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x65, 0x69, 0x6e, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x05, 0x0a, 0x03, 0x4e, 0x6f, 0x70,
	0x22, 0xde, 0x02, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x7a, 0x65, 0x70, 0x68, 0x79, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x7a, 0x65, 0x70, 0x68, 0x79, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x7a, 0x6d, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x7a, 0x6d, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d,
	0x6d, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0xb2, 0x01, 0x0a,
	0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x67, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x67, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x67, 0x62, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x67, 0x62, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x67, 0x62, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x67,
	0x62, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x69,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x69, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x6e, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6b, 0x6e,
	0x6f, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x6e, 0x6f, 0x62, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x6e, 0x6f, 0x62, 0x50, 0x72, 0x65, 0x66,
	0x73, 0x22, 0xe5, 0x02, 0x0a, 0x0a, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4d,
	0x6f, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x02, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x4f, 0x52, 0x51, 0x55, 0x45, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x4c, 0x4f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x22, 0x9a, 0x03, 0x0a, 0x0a, 0x4b, 0x6e,
	0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6d, 0x6f,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x6d, 0x6f, 0x12, 0x2c, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x55, 0x73, 0x62,
	0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4b, 0x6e, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x72,
	0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x55, 0x73, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x2e, 0x4b, 0x6e, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x52, 0x05, 0x70, 0x72, 0x65, 0x66, 0x73, 0x1a, 0xbb, 0x01, 0x0a, 0x04, 0x50,
	0x72, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x4b, 0x6e,
	0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x70, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x72,
	0x71, 0x75, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5c, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x45, 0x52, 0x54, 0x49, 0x41, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x50, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x54, 0x10, 0x06, 0x22, 0xea, 0x01, 0x0a, 0x0a, 0x52, 0x67, 0x62, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x2e, 0x52, 0x67, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xa4, 0x01, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x47, 0x42, 0x5f,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x47, 0x42, 0x5f, 0x4f, 0x46, 0x46, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x47, 0x42, 0x5f, 0x48, 0x55, 0x49, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x47, 0x42, 0x5f, 0x48, 0x55, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x47, 0x42, 0x5f, 0x53, 0x41, 0x49, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x47, 0x42, 0x5f,
	0x53, 0x41, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x47, 0x42, 0x5f, 0x42, 0x52, 0x49,
	0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x47, 0x42, 0x5f, 0x42, 0x52, 0x44, 0x10, 0x08, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x47, 0x42, 0x5f, 0x53, 0x50, 0x49, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x47, 0x42, 0x5f, 0x53, 0x50, 0x44, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x47, 0x42,
	0x5f, 0x45, 0x46, 0x46, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x47, 0x42, 0x5f, 0x45, 0x46,
	0x52, 0x10, 0x0c, 0x22, 0xfb, 0x01, 0x0a, 0x08, 0x52, 0x67, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x67, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x48, 0x53, 0x42, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a,
	0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x55, 0x73, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x67, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x1a, 0x2f, 0x0a, 0x03, 0x48, 0x53, 0x42, 0x12, 0x0c, 0x0a, 0x01,
	0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x01, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x01, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x22, 0x39, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x4f, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x52, 0x45, 0x41, 0x54, 0x48, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x50, 0x45, 0x43,
	0x54, 0x52, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x57, 0x49, 0x52, 0x4c, 0x10,
	0x03, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x52, 0x67, 0x62, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x54, 0x0a, 0x09, 0x45, 0x69, 0x6e, 0x6b,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a,
	0x62, 0x69, 0x74, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x2a, 0xec,
	0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x50,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x4e, 0x4f, 0x42, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x4e, 0x4f,
	0x42, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x4b, 0x4e, 0x4f, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x47, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x47, 0x42, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x47, 0x42, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x47, 0x42, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x47, 0x42, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x49, 0x4e,
	0x4b, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x07, 0x42, 0x20, 0x5a,
	0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x61, 0x69, 0x67,
	0x69, 0x65, 0x2f, 0x7a, 0x6d, 0x6b, 0x78, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
}

var (
	file_comm_proto_rawDescOnce sync.Once
	file_comm_proto_rawDescData = file_comm_proto_rawDesc
)

func file_comm_proto_rawDescGZIP() []byte {
	file_comm_proto_rawDescOnce.Do(func() {
		file_comm_proto_rawDescData = protoimpl.X.CompressGZIP(file_comm_proto_rawDescData)
	})
	return file_comm_proto_rawDescData
}

var file_comm_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_comm_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_comm_proto_goTypes = []interface{}{
	(Action)(0),                 // 0: UsbComm.Action
	(MotorState_ControlMode)(0), // 1: UsbComm.MotorState.ControlMode
	(KnobConfig_Mode)(0),        // 2: UsbComm.KnobConfig.Mode
	(RgbControl_Command)(0),     // 3: UsbComm.RgbControl.Command
	(RgbState_Effect)(0),        // 4: UsbComm.RgbState.Effect
	(*MessageH2D)(nil),          // 5: UsbComm.MessageH2D
	(*MessageD2H)(nil),          // 6: UsbComm.MessageD2H
	(*Nop)(nil),                 // 7: UsbComm.Nop
	(*Version)(nil),             // 8: UsbComm.Version
	(*MotorState)(nil),          // 9: UsbComm.MotorState
	(*KnobConfig)(nil),          // 10: UsbComm.KnobConfig
	(*RgbControl)(nil),          // 11: UsbComm.RgbControl
	(*RgbState)(nil),            // 12: UsbComm.RgbState
	(*RgbIndicator)(nil),        // 13: UsbComm.RgbIndicator
	(*EinkImage)(nil),           // 14: UsbComm.EinkImage
	(*Version_Features)(nil),    // 15: UsbComm.Version.Features
	(*KnobConfig_Pref)(nil),     // 16: UsbComm.KnobConfig.Pref
	(*RgbState_HSB)(nil),        // 17: UsbComm.RgbState.HSB
}
var file_comm_proto_depIdxs = []int32{
	0,  // 0: UsbComm.MessageH2D.action:type_name -> UsbComm.Action
	7,  // 1: UsbComm.MessageH2D.nop:type_name -> UsbComm.Nop
	10, // 2: UsbComm.MessageH2D.knob_config:type_name -> UsbComm.KnobConfig
	16, // 3: UsbComm.MessageH2D.knob_pref:type_name -> UsbComm.KnobConfig.Pref
	11, // 4: UsbComm.MessageH2D.rgb_control:type_name -> UsbComm.RgbControl
	12, // 5: UsbComm.MessageH2D.rgb_state:type_name -> UsbComm.RgbState
	13, // 6: UsbComm.MessageH2D.rgb_indicator:type_name -> UsbComm.RgbIndicator
	14, // 7: UsbComm.MessageH2D.eink_image:type_name -> UsbComm.EinkImage
	0,  // 8: UsbComm.MessageD2H.action:type_name -> UsbComm.Action
	7,  // 9: UsbComm.MessageD2H.nop:type_name -> UsbComm.Nop
	8,  // 10: UsbComm.MessageD2H.version:type_name -> UsbComm.Version
	9,  // 11: UsbComm.MessageD2H.motor_state:type_name -> UsbComm.MotorState
	10, // 12: UsbComm.MessageD2H.knob_config:type_name -> UsbComm.KnobConfig
	16, // 13: UsbComm.MessageD2H.knob_pref:type_name -> UsbComm.KnobConfig.Pref
	12, // 14: UsbComm.MessageD2H.rgb_state:type_name -> UsbComm.RgbState
	13, // 15: UsbComm.MessageD2H.rgb_indicator:type_name -> UsbComm.RgbIndicator
	14, // 16: UsbComm.MessageD2H.eink_image:type_name -> UsbComm.EinkImage
	15, // 17: UsbComm.Version.features:type_name -> UsbComm.Version.Features
	1,  // 18: UsbComm.MotorState.control_mode:type_name -> UsbComm.MotorState.ControlMode
	2,  // 19: UsbComm.KnobConfig.mode:type_name -> UsbComm.KnobConfig.Mode
	16, // 20: UsbComm.KnobConfig.prefs:type_name -> UsbComm.KnobConfig.Pref
	3,  // 21: UsbComm.RgbControl.command:type_name -> UsbComm.RgbControl.Command
	17, // 22: UsbComm.RgbState.color:type_name -> UsbComm.RgbState.HSB
	4,  // 23: UsbComm.RgbState.effect:type_name -> UsbComm.RgbState.Effect
	2,  // 24: UsbComm.KnobConfig.Pref.mode:type_name -> UsbComm.KnobConfig.Mode
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_comm_proto_init() }
func file_comm_proto_init() {
	if File_comm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_comm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageH2D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageD2H); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MotorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnobConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RgbControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RgbState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RgbIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EinkImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version_Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KnobConfig_Pref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RgbState_HSB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_comm_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MessageH2D_Nop)(nil),
		(*MessageH2D_KnobConfig)(nil),
		(*MessageH2D_KnobPref)(nil),
		(*MessageH2D_RgbControl)(nil),
		(*MessageH2D_RgbState)(nil),
		(*MessageH2D_RgbIndicator)(nil),
		(*MessageH2D_EinkImage)(nil),
	}
	file_comm_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MessageD2H_Nop)(nil),
		(*MessageD2H_Version)(nil),
		(*MessageD2H_MotorState)(nil),
		(*MessageD2H_KnobConfig)(nil),
		(*MessageD2H_KnobPref)(nil),
		(*MessageD2H_RgbState)(nil),
		(*MessageD2H_RgbIndicator)(nil),
		(*MessageD2H_EinkImage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comm_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_comm_proto_goTypes,
		DependencyIndexes: file_comm_proto_depIdxs,
		EnumInfos:         file_comm_proto_enumTypes,
		MessageInfos:      file_comm_proto_msgTypes,
	}.Build()
	File_comm_proto = out.File
	file_comm_proto_rawDesc = nil
	file_comm_proto_goTypes = nil
	file_comm_proto_depIdxs = nil
}
